/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PatientRegistrationForm } from "./PatientRegistrationForm";
import { PatientRegistrationFormCountArgs } from "./PatientRegistrationFormCountArgs";
import { PatientRegistrationFormFindManyArgs } from "./PatientRegistrationFormFindManyArgs";
import { PatientRegistrationFormFindUniqueArgs } from "./PatientRegistrationFormFindUniqueArgs";
import { CreatePatientRegistrationFormArgs } from "./CreatePatientRegistrationFormArgs";
import { UpdatePatientRegistrationFormArgs } from "./UpdatePatientRegistrationFormArgs";
import { DeletePatientRegistrationFormArgs } from "./DeletePatientRegistrationFormArgs";
import { PatientRegistrationFormService } from "../patientRegistrationForm.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PatientRegistrationForm)
export class PatientRegistrationFormResolverBase {
  constructor(
    protected readonly service: PatientRegistrationFormService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PatientRegistrationForm",
    action: "read",
    possession: "any",
  })
  async _patientRegistrationFormsMeta(
    @graphql.Args() args: PatientRegistrationFormCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PatientRegistrationForm])
  @nestAccessControl.UseRoles({
    resource: "PatientRegistrationForm",
    action: "read",
    possession: "any",
  })
  async patientRegistrationForms(
    @graphql.Args() args: PatientRegistrationFormFindManyArgs
  ): Promise<PatientRegistrationForm[]> {
    return this.service.patientRegistrationForms(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PatientRegistrationForm, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PatientRegistrationForm",
    action: "read",
    possession: "own",
  })
  async patientRegistrationForm(
    @graphql.Args() args: PatientRegistrationFormFindUniqueArgs
  ): Promise<PatientRegistrationForm | null> {
    const result = await this.service.patientRegistrationForm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PatientRegistrationForm)
  @nestAccessControl.UseRoles({
    resource: "PatientRegistrationForm",
    action: "create",
    possession: "any",
  })
  async createPatientRegistrationForm(
    @graphql.Args() args: CreatePatientRegistrationFormArgs
  ): Promise<PatientRegistrationForm> {
    return await this.service.createPatientRegistrationForm({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PatientRegistrationForm)
  @nestAccessControl.UseRoles({
    resource: "PatientRegistrationForm",
    action: "update",
    possession: "any",
  })
  async updatePatientRegistrationForm(
    @graphql.Args() args: UpdatePatientRegistrationFormArgs
  ): Promise<PatientRegistrationForm | null> {
    try {
      return await this.service.updatePatientRegistrationForm({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PatientRegistrationForm)
  @nestAccessControl.UseRoles({
    resource: "PatientRegistrationForm",
    action: "delete",
    possession: "any",
  })
  async deletePatientRegistrationForm(
    @graphql.Args() args: DeletePatientRegistrationFormArgs
  ): Promise<PatientRegistrationForm | null> {
    try {
      return await this.service.deletePatientRegistrationForm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

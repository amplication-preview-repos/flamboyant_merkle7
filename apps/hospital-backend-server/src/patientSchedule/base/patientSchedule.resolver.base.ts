/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PatientSchedule } from "./PatientSchedule";
import { PatientScheduleCountArgs } from "./PatientScheduleCountArgs";
import { PatientScheduleFindManyArgs } from "./PatientScheduleFindManyArgs";
import { PatientScheduleFindUniqueArgs } from "./PatientScheduleFindUniqueArgs";
import { CreatePatientScheduleArgs } from "./CreatePatientScheduleArgs";
import { UpdatePatientScheduleArgs } from "./UpdatePatientScheduleArgs";
import { DeletePatientScheduleArgs } from "./DeletePatientScheduleArgs";
import { PatientScheduleService } from "../patientSchedule.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PatientSchedule)
export class PatientScheduleResolverBase {
  constructor(
    protected readonly service: PatientScheduleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PatientSchedule",
    action: "read",
    possession: "any",
  })
  async _patientSchedulesMeta(
    @graphql.Args() args: PatientScheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PatientSchedule])
  @nestAccessControl.UseRoles({
    resource: "PatientSchedule",
    action: "read",
    possession: "any",
  })
  async patientSchedules(
    @graphql.Args() args: PatientScheduleFindManyArgs
  ): Promise<PatientSchedule[]> {
    return this.service.patientSchedules(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PatientSchedule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PatientSchedule",
    action: "read",
    possession: "own",
  })
  async patientSchedule(
    @graphql.Args() args: PatientScheduleFindUniqueArgs
  ): Promise<PatientSchedule | null> {
    const result = await this.service.patientSchedule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PatientSchedule)
  @nestAccessControl.UseRoles({
    resource: "PatientSchedule",
    action: "create",
    possession: "any",
  })
  async createPatientSchedule(
    @graphql.Args() args: CreatePatientScheduleArgs
  ): Promise<PatientSchedule> {
    return await this.service.createPatientSchedule({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PatientSchedule)
  @nestAccessControl.UseRoles({
    resource: "PatientSchedule",
    action: "update",
    possession: "any",
  })
  async updatePatientSchedule(
    @graphql.Args() args: UpdatePatientScheduleArgs
  ): Promise<PatientSchedule | null> {
    try {
      return await this.service.updatePatientSchedule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PatientSchedule)
  @nestAccessControl.UseRoles({
    resource: "PatientSchedule",
    action: "delete",
    possession: "any",
  })
  async deletePatientSchedule(
    @graphql.Args() args: DeletePatientScheduleArgs
  ): Promise<PatientSchedule | null> {
    try {
      return await this.service.deletePatientSchedule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

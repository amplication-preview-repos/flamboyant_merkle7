/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PatientSchedule as PrismaPatientSchedule,
} from "@prisma/client";

export class PatientScheduleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PatientScheduleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.patientSchedule.count(args);
  }

  async patientSchedules(
    args: Prisma.PatientScheduleFindManyArgs
  ): Promise<PrismaPatientSchedule[]> {
    return this.prisma.patientSchedule.findMany(args);
  }
  async patientSchedule(
    args: Prisma.PatientScheduleFindUniqueArgs
  ): Promise<PrismaPatientSchedule | null> {
    return this.prisma.patientSchedule.findUnique(args);
  }
  async createPatientSchedule(
    args: Prisma.PatientScheduleCreateArgs
  ): Promise<PrismaPatientSchedule> {
    return this.prisma.patientSchedule.create(args);
  }
  async updatePatientSchedule(
    args: Prisma.PatientScheduleUpdateArgs
  ): Promise<PrismaPatientSchedule> {
    return this.prisma.patientSchedule.update(args);
  }
  async deletePatientSchedule(
    args: Prisma.PatientScheduleDeleteArgs
  ): Promise<PrismaPatientSchedule> {
    return this.prisma.patientSchedule.delete(args);
  }
}
